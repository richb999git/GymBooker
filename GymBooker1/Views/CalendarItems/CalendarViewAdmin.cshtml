@* Admin page to view the calendar *@
@* Controller: CalendarItemsController  *@

@model IEnumerable<GymBooker1.Models.CalendarItem>

@{
    ViewBag.Title = "EDIT FITNESS CLASSES FROM LIVE CALENDAR";
}

<h2>@ViewBag.Title</h2>

<p>
    @Html.ActionLink("Add a New Class", "Create")
</p>

@{
    var a = Model.ToArray();
    DateTime prev = DateTime.Now;
    DateTime next = DateTime.Now;
    if (a.Length > 0)
    {
        prev = ViewBag.ClassDate.AddDays(-7) <= DateTime.Now.Date ? DateTime.Now : ViewBag.ClassDate.AddDays(-7);
        next = ViewBag.ClassDate.AddDays(7);
    }
}


<br />
<div class="dropdown pull-left">
    <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
        Choose class type
        <span class="caret"></span>
    </button>
    <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
        <li onClick="buttonClick()">@Html.ActionLink("ALL", "CalendarViewAdmin", new { fitnessClass = "ALL" })</li>
        @foreach (var item in ViewBag.GymClasses)
        {
            <li onClick="buttonClick()">@Html.ActionLink((string)item.Name, "CalendarViewAdmin", new { fitnessClass = item.Name })</li>
        }
    </ul>
</div>

<p class="timetableDropdownChoice" >
      @ViewBag.fitnessClass
</p>

<div class="clearfix"></div>

<br />
@*Bootstrap 3
    Using a list-inline with 4 columns of 2 to be able to show 8 columns across the screen *@

<div>
    @if (a.Length == 0)
    {
        <p>No classes</p>
    }
    else
    {
        if (a[0].GymClassTime.Date > DateTime.Now.AddDays(6).Date)
        {
            @*<button onClick="buttonClick()" id="prevButton" type="button" class="btn btn-info pull-left">@Html.ActionLink("PREVIOUS WEEK", "Index", new { classDate = prev.ToString("d-MMM-yyyy"), fitnessClass = Request.QueryString["fitnessClass"] })</button>*@
            @Html.ActionLink("PREVIOUS WEEK", "CalendarViewAdmin", new { classDate = prev.ToString("d-MMM-yyyy"), fitnessClass = Request.QueryString["fitnessClass"] }, new { id = "prevButton", @class = "btn btn-info pull-left", onClick = "buttonClick()" })
        }

        // if next < last date in timetable
        if (next < a[a.Length - 1].GymClassTime)
        {
            @*<button id="nextButton" type="button" class="btn btn-info pull-right">@Html.ActionLink("NEXT WEEK", "Index", new { classDate = next.ToString("d-MMM-yyyy"), fitnessClass = Request.QueryString["fitnessClass"] }, new { onClick = "buttonClick()" })</button>*@
            @Html.ActionLink("NEXT WEEK", "CalendarViewAdmin", new { classDate = next.ToString("d-MMM-yyyy"), fitnessClass = Request.QueryString["fitnessClass"] }, new { id = "nextButton", @class = "btn btn-info pull-right", onClick = "buttonClick()" })
        }
    }

</div>

<br /><br /><br />


<ul class="list-inline row">
    @{ var j = 0; // 0 when sending with a from date. Else would need to get to the from date
        DateTime DateInWeek = ViewBag.ClassDate;
    }
    @for (int day = 0; day < 7; day = day + 2)
    {

        <li class="col-md-3 col-xs-12 text-center" style="padding: 1px">

            @for (int k = 0; k < 2; k++)
            {
                <div class="col-md-6 col-xs-12" style="padding: 2px;">


                    <div class="panel panel-primary">
                        <div class="panel-heading">
                            <h2 class="panel-title title-smaller">@DateInWeek.Date.ToString("ddd d MMM")</h2>
                        </div>

                        @{if (j >= a.Length || a[j].GymClassTime.Date != DateInWeek.Date) // check if end of data for the week or day
                            {

                                <hr class="hrCalendar" />
                                <div class="sel">
                                    <div class="panel-body fixed-panel">
                                        <h6>No classes</h6>
                                    </div>
                                </div>
                            }
                            else
                            {
                                while (j < a.Length && a[j].GymClassTime.Date == DateInWeek.Date) // if the same date then keep looping
                                {
                                    <hr class="hrCalendar" />
                                    <div class="sel" id="@a[j].GymClass.Id" href='@Url.Action("ClassDescription", new { id = a[j].GymClass.Id })'>
                                        <div class="panel-body fixed-panel">
                                            <p class="text-uppercase text-black mb-0"><b>@a[j].GymClass.Name</b></p>
                                            <p class="text-primary mb-1"><b>@a[j].GymClassTime.ToString("HH:mm tt").ToLower()</b></p>
                                            <p class="text-primary mb-1"><b>(@a[j].Duration mins)</b></p>
                                            <h6 class="text-black mb-0">@a[j].Instructor</h6>
                                            <h6 class="text-black mt-1">@a[j].Hall</h6>


                                            @if (a[j].UserIds.Length != 0)
                                            {
                                                List<string> gymClassAttenders = new List<string>();
                                                int numInClass = a[j].UserIds == "" ? 0 : a[j].UserIds.Count(x => x == ',') + 1;
                                                @Html.ActionLink("Class details", "Details", new { id = a[j].Id }, new { @class = "btn btn-primary mb-6 rounded", onClick = "buttonClick()" })
                                                <h5 class="text-black mt-1">Members booked: @numInClass</h5>
                                                <p class="text-black mt-1">Cannot edit/delete</p>
                                            }
                                            else
                                            {
                                                @Html.ActionLink("Edit Class", "Edit", new { id = a[j].Id }, new { @class = "btn btn-primary mb-6 rounded", onClick = "buttonClick()" })
                                                @Html.ActionLink("Delete class", "Delete", new { id = a[j].Id }, new { @class = "btn btn-danger mb-6 rounded", onClick = "buttonClick()" })
                                            }

                                        </div>
                                    </div>

                                    j = j + 1;
                                }
                            }


                        }

                    </div>
                </div>

                DateInWeek = DateInWeek.AddDays(1);
            }

        </li>
    }

</ul>
